// Copyright (c) 2019 Matias Furszyfer
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.


package com.zerocoinj.core.context;

import com.zerocoinj.utils.JniBridgeWrapper;
import org.pivxj.core.Utils;
import org.pivxj.crypto.LinuxSecureRandom;

import java.math.BigInteger;
import java.security.SecureRandom;

import static com.zerocoinj.core.context.ZerocoinDefines.ACCPROOF_KDPRIME;
import static com.zerocoinj.core.context.ZerocoinDefines.ACCPROOF_KPRIME;
import static com.zerocoinj.utils.ZUtils.BIGNUM_2;

public class ZerocoinContext {

    public static final int ZEROCOIN_DEFAULT_SECURITYLEVEL = 80;

    private static SecureRandom secureRandom;
    public static JniBridgeWrapper jniBridge;


    public final AccumulatorAndProofParams accumulatorParams;

    /**
     * The Quadratic Residue group from which we form
     * a coin as a commitment  to a serial number.
     */
    public final IntegerGroupParams coinCommitmentGroup;

    /**
     * One of two groups used to form a commitment to
     * a coin (which it self is a commitment to a serial number).
     * This is the one used in the serial number poof.
     * It's order must be equal to the modulus of coinCommitmentGroup.
     */
    public final IntegerGroupParams serialNumberSoKCommitmentGroup;

    /**
     * The number of iterations to use in the serial
     * number proof.
     */
    public final int zkp_iterations;

    /**
     * The amount of the hash function we use for
     * proofs.
     */
    public final int zkp_hash_len;

    private boolean isInitialized;


    /** @brief Construct a set of Zerocoin parameters from a modulus "N".
     * @param N                A trusted RSA modulus
     * @param securityLevel    A security level expressed in symmetric bits (default 80)
     *
     * Allocates and derives a set of Zerocoin parameters from
     * a trustworthy RSA modulus "N". This routine calculates all
     * of the remaining parameters (group descriptions etc.) from N
     * using a verifiable, deterministic procedure.
     *
     * Note: this constructor makes the fundamental assumption that "N"
     * encodes a valid RSA-style modulus of the form "e1 * e2" where
     * "e1" and "e2" are safe primes. The factors "e1", "e2" MUST NOT
     * be known to any party, or the security of Zerocoin is
     * compromised. The integer "N" must be a MINIMUM of 1024
     * in length. 3072 bits is strongly recommended.
     **/
    public ZerocoinContext(JniBridgeWrapper jniBridge){

        if(Utils.isAndroidRuntime())
            new LinuxSecureRandom();

        secureRandom = new SecureRandom();
        this.jniBridge = jniBridge;

        zkp_hash_len = ZEROCOIN_DEFAULT_SECURITYLEVEL;
        zkp_iterations = ZEROCOIN_DEFAULT_SECURITYLEVEL;

        accumulatorParams = new AccumulatorAndProofParams();
        accumulatorParams.k_prime = ACCPROOF_KPRIME;
        accumulatorParams.k_dprime = ACCPROOF_KDPRIME;


        accumulatorParams.accumulatorModulus = new BigInteger(
                "25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784"+
                        "4069182906412495150821892985591491761845028084891200728449926873928072877767359714183472702618963750149718246911"+
                        "6507761337985909570009733045974880842840179742910064245869181719511874612151517265463228221686998754918242243363"+
                        "7259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133"+
                        "8441436038339044149526344321901146575444541784240209246165157233507787077498171257724679629263863563732899121548"+
                        "31438167899885040445364023527381951378636564391212010397122822120720357"
        );


        /**
         *
         *  coinCommitmentGroup group order: 73829871667027927151400291810255409637272593023945445234219354687881008052707
         * coinCommitmentGroup g: 108493142922526728666632567817665003170796919105635379209392198423511598366861400891077767613510689994661458247627782967131380742158803028619370850599707720731033316825396014640162292085141754403426615747531818926542832854769301325069842551396491200417945280389398187668412942712019408916579750269745817796962
         * coinCommitmentGroup h: 143768995274515109916888615338023796202313741184535853350599647575636989065333362353091304549805392264078663304320988432201880421827463211723771823949879552174363526461270186191043021150237526637849110930802283354306286109510594071984169318215708259157133799891029533089380569710081411838705163403395345909282
         * coinCommitmentGroup modulus: 161472451372577012801537365723922556211848315807594124571141764504999544408362125454072210505394654546158172195415400420843049128478444392858426591864457908932595588930280642318371343109552712010176780306349674252280901839211018654763617444978825645960598892468748168577682155499188091216022125857543517086273
         *
         */

        coinCommitmentGroup = new IntegerGroupParams(
                new BigInteger("108493142922526728666632567817665003170796919105635379209392198423511598366861400891077767613510689994661458247627782967131380742158803028619370850599707720731033316825396014640162292085141754403426615747531818926542832854769301325069842551396491200417945280389398187668412942712019408916579750269745817796962"),
                new BigInteger("143768995274515109916888615338023796202313741184535853350599647575636989065333362353091304549805392264078663304320988432201880421827463211723771823949879552174363526461270186191043021150237526637849110930802283354306286109510594071984169318215708259157133799891029533089380569710081411838705163403395345909282"),
                new BigInteger("161472451372577012801537365723922556211848315807594124571141764504999544408362125454072210505394654546158172195415400420843049128478444392858426591864457908932595588930280642318371343109552712010176780306349674252280901839211018654763617444978825645960598892468748168577682155499188091216022125857543517086273"),
                new BigInteger("73829871667027927151400291810255409637272593023945445234219354687881008052707")
        );


        serialNumberSoKCommitmentGroup = new IntegerGroupParams(
                new BigInteger("21096888212125271739973524700469012071805080315709017270154257517151731936043861249838568325299260131423554571473851312889920733953304708855280788741871347829374684936036629729407954142789907825080023162994631244426527098266642401753244282994349741119798694752804652951720145642997320532250415624051244519718962"),
                new BigInteger("1057789999127700361658730585374239110641097093723467921498926051792628582943625838606850256882218718510457976481862120899251215287722172723610308468246699051086562620926166685214676570841935260577230760207225528863843983900011670724260084187710428442102052719011270212690510630717312429464912547338020304574265"),
                new BigInteger("48764680314518257866064284448624611975978191373893425620484812880509862411325361887129807572629185672939768003015450927094600836800490206643244830743066288497643867856944753980148145619084919027073387652517601624188832355441727633738612468383605345080100865525561946910460010960754803547238682008978142160054447"),
                new BigInteger("161472451372577012801537365723922556211848315807594124571141764504999544408362125454072210505394654546158172195415400420843049128478444392858426591864457908932595588930280642318371343109552712010176780306349674252280901839211018654763617444978825645960598892468748168577682155499188091216022125857543517086273")
        );


        accumulatorParams.accumulatorPoKCommitmentGroup = new IntegerGroupParams(
                new BigInteger("27038147133488000468401229085396783207888387834442538964222787119934416304249245770908052655959264985432798760039333289179547924636246149813976750021254339297470581671"),
                new BigInteger("59483850859740404953167886707363467451241448793651592607654401755815264040992965671756081450104248253368510453317093832680397880755176296292044317572851876355584965254"),
                new BigInteger("221689256748619208765339994366479110745287407063620327913552736037218139290103359313085545370841356502241147945912217525177503404974757550741305479867000886353873844337"),
                new BigInteger("167462505451915571684536165131243832495176884827375481829798383623701651829343")
        );



        accumulatorParams.accumulatorQRNCommitmentGroup = new IntegerGroupParams(
                new BigInteger("12515768876277454098048833462318333741626642120367352496365112711132156539640254282373291644460852301655124044242830137321162226453187774464224323930259684219898144014779206998506773785001228607950009786132839602237295760308286517377233717307740345890659412431100775518371834790678718031317412660689157588310934292010517005365037707624589506779588645175479875808930335936191122294022217583816484542098940402773526628111407295077187495702727028886754043228342368225887328745368163117741965587841576849866437433456910598942685971246793781398744775870361829650468346540183424248532881368551983923973353701934675982284346"),
                new BigInteger("12325860524510491339572212071845979041217674154154236851631337720783823686221939160425120738791664170783985457186496348316061007116444968041463118343334911620888210887736620211484582286172535838677860778197886060646981072854154388898743803839832396219948173024661977808547260484684692388705878845631524840438211607510913618727972543557808191547447576532298605244846873062663322981760177948426040013970048173596498702504929428870551205417079290127685329757061661209564979867587316941448480969838723959819486390545691896135081730838295510944316269287804435934279464036931860412072452727502215023859520179974012204996610"),
                BigInteger.ZERO,
                BigInteger.ZERO
        );

        // Calculate the accumulator base, which we calculate as "u = C**2 mod N"
        // where C is an arbitrary value. In the unlikely case that "u = 1" we increment
        // "C" and repeat.
        BigInteger constant = new BigInteger("31");
        accumulatorParams.accumulatorBase = BigInteger.ONE;
        for (int count = 0; count < 10000 && accumulatorParams.accumulatorBase.equals(BigInteger.ONE); count++) {
            accumulatorParams.accumulatorBase = constant.modPow(BIGNUM_2, accumulatorParams.accumulatorModulus);
        }

        // Compute the accumulator range. The upper range is the largest possible coin commitment value.
        // The lower range is sqrt(upper range) + 1. Since OpenSSL doesn't have
        // a square root function we use a slightly higher approximation.
        accumulatorParams.maxCoinValue = coinCommitmentGroup.getModulus();
        accumulatorParams.minCoinValue = BIGNUM_2.pow((coinCommitmentGroup.getModulus().bitLength() / 2) + 3);

        isInitialized = true;
    }

    public ZerocoinContext(AccumulatorAndProofParams accumulatorParams, IntegerGroupParams coinCommitmentGroup, IntegerGroupParams serialNumberSoKCommitmentGroup, int zkp_iterations, int zkp_hash_len) {
        this.accumulatorParams = accumulatorParams;
        this.coinCommitmentGroup = coinCommitmentGroup;
        this.serialNumberSoKCommitmentGroup = serialNumberSoKCommitmentGroup;
        this.zkp_iterations = zkp_iterations;
        this.zkp_hash_len = zkp_hash_len;
    }

    public static SecureRandom getSecureRandom() {
        return secureRandom;
    }

    public AccumulatorAndProofParams getAccumulatorParams() {
        return accumulatorParams;
    }

    public IntegerGroupParams getCoinCommitmentGroup() {
        return coinCommitmentGroup;
    }

    public IntegerGroupParams getSerialNumberSoKCommitmentGroup() {
        return serialNumberSoKCommitmentGroup;
    }

    public int getZkp_iterations() {
        return zkp_iterations;
    }

    public int getZkp_hash_len() {
        return zkp_hash_len;
    }

    public boolean isInitialized() {
        return isInitialized;
    }

}
